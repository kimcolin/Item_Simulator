// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma의 model 구문은 특정 Table과 Column의 속성값을 입력하여,
// 데이터베이스와 Express 프로젝트를 연결 (Mapping)시켜줍니다.

//prisma 클라이언트를 생성하는 방식을 설정하는 구문
generator client {
  provider = "prisma-client-js"
}

//prisma 가 어떤 db엔진을 사용할 것인지,위치(URL)는 어디인지 등의 정보를 정의
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//아이템 테이블
model Item {
  // itemCode: 정수형, 기본 키
  itemCode      Int      @id @default(autoincrement()) 
  itemName      String   @unique 
  atk           Int      @default(10) 
  price         Int      @default(1000) 

  //@@map("Item")은 item테이블을 MySQL에서 item이란 이름으로 사용한다는 뜻
  //이름을 다르게 설정할 경우 필요하지만 그대로 쓰는 경우엔 굳이 작성하지않아도 됨
  //@@map("Item")
}

//계정 테이블
model Account {
  AccountId     Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  //character

}

//캐릭터 테이블
model Character {
  CharacterId   Int      @id @default(autoincrement())
  name          String   @unique
  //inverntory
  //equipment

}

//캐릭터 인벤토리 테이블
model Inventory {
  InventoryId   Int      @id @default(autoincrement())
  itemlist      Int          
}

//케릭터 아이템 테이블
model Equipment {
  EquipmentId   Int      @id @default(autoincrement())
}




// 이 파일을 수정한 뒤엔 저장 후 터미널에 "npx prisma db push"를 실행해주세요.
// 그리고 MYSQL의 database를 refresh 합니다.